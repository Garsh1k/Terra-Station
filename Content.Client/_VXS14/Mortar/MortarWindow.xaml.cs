using System.Numerics;
using Content.Shared.Explosion;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using static Robust.Client.UserInterface.Controls.BaseButton;
using static Robust.Client.UserInterface.Controls.OptionButton;
using Content.Shared._VXS14.Mortar;
using Content.Client.Eui;

namespace Content.Client._VXS14.Mortar;

[GenerateTypedNameReferences]
[UsedImplicitly]
public sealed partial class MortarWindow : DefaultWindow
{
    [Dependency] private readonly IClientConsoleHost _conHost = default!;
    [Dependency] private readonly IMapManager _mapManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entMan = default!;
    private readonly SharedTransformSystem _transform = default!;

    private readonly MortarEui _eui;
    private MapId _mapData = new();
    /// <summary>
    ///     Used to prevent unnecessary preview updates when setting fields (e.g., updating position)..
    /// </summary>
    private bool _pausePreview;

    public MortarWindow(MortarEui eui)
    {
        Logger.InfoS("mortar-window", "Attempting to load XAML for MortarWindow");
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _transform = _entMan.System<TransformSystem>();
        _eui = eui;

        Recentre.OnPressed += (_) => SetLocation();
        Spawn.OnPressed += SubmitButtonOnOnPressed;

        MapX.OnValueChanged += (_) => UpdatePreview();
        MapY.OnValueChanged += (_) => UpdatePreview();


    }


    protected override void EnteredTree()
    {
        SetLocation();
    }

    /// <summary>
    ///     Set the current grid & indices based on the attached entities current location.
    /// </summary>
    private void SetLocation()
    {

        if (!_entMan.TryGetComponent(_playerManager.LocalEntity, out TransformComponent? transform))
            return;

        _pausePreview = true;

        (MapX.Value, MapY.Value) = _transform.GetMapCoordinates(_playerManager.LocalEntity!.Value, xform: transform).Position;
        _mapData = _transform.GetMapCoordinates(_playerManager.LocalEntity!.Value, xform: transform).MapId;
        _pausePreview = false;
        UpdatePreview();
    }

    private void UpdatePreview()
    {
        if (_pausePreview)
            return;
    }

     private void SubmitButtonOnOnPressed(ButtonEventArgs args)
     {
        // мне похуй простите
        Random rnd = new Random();

        int cock1 = rnd.Next(-3,3);
        int cock2 = rnd.Next(-3,3);

        Vector2 Pos = new Vector2(MapX.Value + cock1, MapY.Value + cock2);
        MapCoordinates cord = new MapCoordinates(Pos,_mapData);
        _eui.SendCords(cord);
     }
}
